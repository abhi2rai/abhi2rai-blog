{"version":3,"sources":["../../src/services/start-webpack-server.ts"],"names":["startWebpackServer","program","app","workerPool","store","report","panic","compiler","webpackActivity","websocketManager","hooks","invalid","tap","pendingActivity","id","watchRun","tapAsync","_","done","activityTimer","start","isFirstCompile","Promise","resolve","stats","messages","toJson","urls","https","host","proxyPort","isSuccessful","errors","length","sitePackageJson","name","open","localUrlForBrowser","console","log","chalk","yellow","compilation","panicOnBuild","end","state","getState","mapOfTemplatesToStaticQueryHashes","forEach","staticQueryHashes","componentPath","staticQueriesByTemplate","get","dispatch","type","payload"],"mappings":"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","sourcesContent":["import openurl from \"better-opn\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport formatWebpackMessages from \"react-dev-utils/formatWebpackMessages\"\nimport chalk from \"chalk\"\nimport { Compiler } from \"webpack\"\nimport { isEqual } from \"lodash\"\n\nimport {\n  reportWebpackWarnings,\n  structureWebpackErrors,\n} from \"../utils/webpack-error-utils\"\n\nimport { printDeprecationWarnings } from \"../utils/print-deprecation-warnings\"\nimport { printInstructions } from \"../utils/print-instructions\"\nimport { prepareUrls } from \"../utils/prepare-urls\"\nimport { startServer } from \"../utils/start-server\"\nimport { WebsocketManager } from \"../utils/websocket-manager\"\nimport { IBuildContext } from \"./\"\nimport {\n  markWebpackStatusAsPending,\n  markWebpackStatusAsDone,\n} from \"../utils/webpack-status\"\nimport { enqueueFlush } from \"../utils/page-data\"\nimport mapTemplatesToStaticQueryHashes from \"../utils/map-templates-to-static-query-hashes\"\n\nexport async function startWebpackServer({\n  program,\n  app,\n  workerPool,\n  store,\n}: Partial<IBuildContext>): Promise<{\n  compiler: Compiler\n  websocketManager: WebsocketManager\n}> {\n  if (!program || !app || !store) {\n    report.panic(`Missing required params`)\n  }\n  let { compiler, webpackActivity, websocketManager } = await startServer(\n    program,\n    app,\n    workerPool\n  )\n\n  compiler.hooks.invalid.tap(`log compiling`, function () {\n    if (!webpackActivity) {\n      // mark webpack as pending if we are not in the middle of compilation already\n      // when input is invalidated during compilation, webpack will automatically\n      // run another compilation round before triggering `done` event\n      report.pendingActivity({ id: `webpack-develop` })\n      markWebpackStatusAsPending()\n    }\n  })\n\n  compiler.hooks.watchRun.tapAsync(`log compiling`, function (_, done) {\n    if (!webpackActivity) {\n      // there can be multiple `watchRun` events before receiving single `done` event\n      // webpack will not emit assets or `done` event until all pending invalidated\n      // inputs were compiled\n      webpackActivity = report.activityTimer(`Re-building development bundle`, {\n        id: `webpack-develop`,\n      })\n      webpackActivity.start()\n    }\n\n    done()\n  })\n\n  let isFirstCompile = true\n\n  return new Promise(resolve => {\n    compiler.hooks.done.tapAsync(`print gatsby instructions`, async function (\n      stats,\n      done\n    ) {\n      // \"done\" event fires when Webpack has finished recompiling the bundle.\n      // Whether or not you have warnings or errors, you will get this event.\n\n      // We have switched off the default Webpack output in WebpackDevServer\n      // options so we are going to \"massage\" the warnings and errors and present\n      // them in a readable focused way.\n      const messages = formatWebpackMessages(stats.toJson({}, true))\n      const urls = prepareUrls(\n        program.https ? `https` : `http`,\n        program.host,\n        program.proxyPort\n      )\n      const isSuccessful = !messages.errors.length\n\n      if (isSuccessful && isFirstCompile) {\n        printInstructions(\n          program.sitePackageJson.name || `(Unnamed package)`,\n          urls\n        )\n        printDeprecationWarnings()\n        if (program.open) {\n          try {\n            await openurl(urls.localUrlForBrowser)\n          } catch {\n            console.log(\n              `${chalk.yellow(\n                `warn`\n              )} Browser not opened because no browser was found`\n            )\n          }\n        }\n      }\n\n      isFirstCompile = false\n\n      if (webpackActivity) {\n        reportWebpackWarnings(stats)\n\n        if (!isSuccessful) {\n          const errors = structureWebpackErrors(\n            `develop`,\n            stats.compilation.errors\n          )\n          webpackActivity.panicOnBuild(errors)\n        }\n        webpackActivity.end()\n        webpackActivity = null\n      }\n\n      if (isSuccessful) {\n        const state = store.getState()\n        const mapOfTemplatesToStaticQueryHashes = mapTemplatesToStaticQueryHashes(\n          state,\n          stats.compilation\n        )\n\n        mapOfTemplatesToStaticQueryHashes.forEach(\n          (staticQueryHashes, componentPath) => {\n            if (\n              !isEqual(\n                state.staticQueriesByTemplate.get(componentPath),\n                staticQueryHashes\n              )\n            ) {\n              store.dispatch({\n                type: `ADD_PENDING_TEMPLATE_DATA_WRITE`,\n                payload: {\n                  componentPath,\n                },\n              })\n              store.dispatch({\n                type: `SET_STATIC_QUERIES_BY_TEMPLATE`,\n                payload: {\n                  componentPath,\n                  staticQueryHashes,\n                },\n              })\n            }\n          }\n        )\n\n        enqueueFlush()\n      }\n\n      markWebpackStatusAsDone()\n      done()\n\n      resolve({ compiler, websocketManager })\n    })\n  })\n}\n"],"file":"start-webpack-server.js"}